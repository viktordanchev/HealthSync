// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(HealthSyncDbContext))]
    [Migration("20250502075420_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Database.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a3717562-385e-41ce-9eff-0f1b994e5548",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e9b9eb9-0ed4-4051-af7d-0fea842041c3",
                            Email = "i.ivanov@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Ivan",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "I.IVANOV@MAIL.COM",
                            NormalizedUserName = "I.IVANOV@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPToz3vdvu26mAvn/hENl9CrOqqBTiGnJ/JVvp3JViR0h6hcOGPdGR1LUtj8E5zXwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "365be671-bf5e-4b7e-840a-1947b97514da",
                            TwoFactorEnabled = false,
                            UserName = "i.ivanov@mail.com"
                        },
                        new
                        {
                            Id = "4d650e24-6b66-41e3-8391-efab8c31a1dd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "183852b2-7fb0-404e-9d0f-01103dff2c0a",
                            Email = "m.marinova@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Maria",
                            LastName = "Marinova",
                            LockoutEnabled = false,
                            NormalizedEmail = "M.MARINOVA@MAIL.COM",
                            NormalizedUserName = "M.MARINOVA@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFoqTAw2yQ/iQMPYA2/JGHWKMsiK+gZ520dQEaSy5gr5Aa2TDec3gTnB62vZ01oulw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e391fc79-6ba1-4403-8610-6922f8bddd50",
                            TwoFactorEnabled = false,
                            UserName = "m.marinova@mail.com"
                        },
                        new
                        {
                            Id = "88cd5a7b-01d8-49b4-8688-35cd23751532",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "25453aef-9d58-4757-82cc-5fd3d9ad0714",
                            Email = "a.kirilov@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Aleks",
                            LastName = "Kirilov",
                            LockoutEnabled = false,
                            NormalizedEmail = "A.KIRILOV@MAIL.COM",
                            NormalizedUserName = "A.KIRILOV@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKLpfjbPr3xcQ4OT+ZO2o+TbDz6Aoc98ZLYP6erZMn5i6ojr54eBCBxXLOdTqHy3Xw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "76d3b694-4c92-488e-b640-bd7d087a9186",
                            TwoFactorEnabled = false,
                            UserName = "a.kirilov@mail.com"
                        },
                        new
                        {
                            Id = "95189f02-fb1a-4700-95e3-6146b8aa8b15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3add8d92-daa8-4f38-ba0c-43507fc52f8c",
                            Email = "k.conev@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Kiril",
                            LastName = "Conev",
                            LockoutEnabled = false,
                            NormalizedEmail = "K.CONEV@MAIL.COM",
                            NormalizedUserName = "K.CONEV@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMhj5cBPrVfJDv0QI4lSSae8mxL0wUWpaBRz3VNjcXVHghq4EPZ8D8kRdlj7HV9/Eg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fed8dda5-d07e-4176-8031-f460e3ffd145",
                            TwoFactorEnabled = false,
                            UserName = "k.conev@mail.com"
                        },
                        new
                        {
                            Id = "f37b43ca-86a2-4b11-972d-5e0569f4deb3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cca9dd8b-2339-4fd9-8a19-8e845b259e0e",
                            Email = "i.ivanova@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Ivana",
                            LastName = "Ivanova",
                            LockoutEnabled = false,
                            NormalizedEmail = "I.IVANOVA@MAIL.COM",
                            NormalizedUserName = "I.IVANOVA@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEcPmawhhasIdD+BeSOA/V4YK2NYMNURTMj6n3ufrLJ5zCqs2rtCQzkhyLJencLO1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4f5d4e00-fed0-4cb3-b60e-eb65f444a602",
                            TwoFactorEnabled = false,
                            UserName = "i.ivanova@mail.com"
                        },
                        new
                        {
                            Id = "d99b0dbf-6a91-4dc0-a29e-9ffd46f79d35",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "699c6705-0fe3-42af-8381-5568c54086db",
                            Email = "m.kirilova@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Monika",
                            LastName = "Kirilova",
                            LockoutEnabled = false,
                            NormalizedEmail = "M.KIRILOVA@MAIL.COM",
                            NormalizedUserName = "M.KIRILOVA@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELvPn5upjUlzESJSYJStjjqdfXQHyKuH/S8AQGJRtW1lXpR1d/tPcCSZTVE2BrGK1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1beb54dc-b91e-42da-9b45-d1150c7d597e",
                            TwoFactorEnabled = false,
                            UserName = "m.kirilova@mail.com"
                        },
                        new
                        {
                            Id = "78850da7-a0ff-42f3-a862-d162457910a0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2122ef41-6ca1-4c94-a83f-8f6ad35b35b9",
                            Email = "v.yankova@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Vanya",
                            LastName = "Yankova",
                            LockoutEnabled = false,
                            NormalizedEmail = "V.YANKOVA@MAIL.COM",
                            NormalizedUserName = "V.YANKOVA@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPNjNVeofJHRv22jj+Q61Xvfhg/BsIFZ5CclLEMqKM46E9Fa0XVdGfU7xOzW5Y/39Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "35832bdc-5177-493e-bf0c-e5cba53fa8d8",
                            TwoFactorEnabled = false,
                            UserName = "v.yankova@mail.com"
                        });
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("ContactPhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("HospitalId")
                        .HasColumnType("integer");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("text");

                    b.Property<string>("Information")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("IdentityId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HospitalId = 1,
                            IdentityId = "a3717562-385e-41ce-9eff-0f1b994e5548",
                            ImgUrl = "https://healthsyncstorage.blob.core.windows.net/profile-images/a3717562-385e-41ce-9eff-0f1b994e5548.jpg",
                            Information = "I am Dr. Ivan Ivanov, an orthodontist with over 10 years of experience. I earned my Doctor of Dental Medicine (DMD) degree from Sofia Medical University, where I also completed my orthodontic specialization. I have worked in various reputable dental clinics, providing treatments such as braces, clear aligners, and other advanced orthodontic procedures for patients of all ages. I focus on delivering personalized care, creating treatment plans tailored to each patient’s specific needs. I hold certifications in advanced orthodontic techniques and regularly attend courses to stay updated with the latest advancements in the field. My goal is to ensure that every patient receives the best possible outcome. Known for my compassionate approach and attention to detail, I strive to help my patients achieve healthier, more beautiful smiles. My dedication to patient satisfaction and passion for orthodontics have earned me a solid reputation in the field, making me a trusted choice for care.",
                            SpecialtyId = 1
                        },
                        new
                        {
                            Id = 2,
                            HospitalId = 1,
                            IdentityId = "4d650e24-6b66-41e3-8391-efab8c31a1dd",
                            ImgUrl = "https://healthsyncstorage.blob.core.windows.net/profile-images/4d650e24-6b66-41e3-8391-efab8c31a1dd.jpg",
                            Information = "I graduated from the Medical University of Sofia and have been practicing medicine for over 12 years. Throughout my career, I have focused on internal medicine, always striving to offer thorough and personalized care. I believe in building strong relationships with my patients to ensure long-term health and well-being.",
                            SpecialtyId = 2
                        },
                        new
                        {
                            Id = 3,
                            HospitalId = 1,
                            IdentityId = "88cd5a7b-01d8-49b4-8688-35cd23751532",
                            ImgUrl = "https://healthsyncstorage.blob.core.windows.net/profile-images/88cd5a7b-01d8-49b4-8688-35cd23751532.jpg",
                            Information = "I am a dedicated endocrinologist with a passion for helping patients manage their hormonal health. I graduated from Sofia Medical University and completed my residency in endocrinology at the same institution. With over 8 years of experience, I specialize in treating conditions such as diabetes, thyroid disorders, and adrenal gland issues. My approach to patient care is holistic, focusing on both medical treatment and lifestyle modifications to achieve optimal health outcomes. I am committed to staying updated with the latest advancements in endocrinology to provide the best care possible.",
                            SpecialtyId = 2
                        },
                        new
                        {
                            Id = 4,
                            HospitalId = 1,
                            IdentityId = "95189f02-fb1a-4700-95e3-6146b8aa8b15",
                            ImgUrl = "https://healthsyncstorage.blob.core.windows.net/profile-images/95189f02-fb1a-4700-95e3-6146b8aa8b15.jpg",
                            Information = "I am a cardiologist with a strong commitment to patient care and education. I graduated from Sofia Medical University and completed my residency in cardiology at the same institution. With over 10 years of experience, I specialize in diagnosing and treating various heart conditions, including hypertension, coronary artery disease, and heart failure. My approach to patient care emphasizes prevention and lifestyle modifications, and I work closely with my patients to develop personalized treatment plans. I am dedicated to staying current with the latest advancements in cardiology to provide the best possible care.",
                            SpecialtyId = 3
                        },
                        new
                        {
                            Id = 5,
                            HospitalId = 2,
                            IdentityId = "f37b43ca-86a2-4b11-972d-5e0569f4deb3",
                            ImgUrl = "https://healthsyncstorage.blob.core.windows.net/profile-images/f37b43ca-86a2-4b11-972d-5e0569f4deb3.jpg",
                            Information = "I am a neurologist with a passion for understanding the complexities of the human brain and nervous system. I graduated from Sofia Medical University and completed my residency in neurology at the same institution. With over 7 years of experience, I specialize in diagnosing and treating neurological disorders such as epilepsy, multiple sclerosis, and migraines. My approach to patient care is comprehensive, focusing on both medical treatment and lifestyle modifications to improve overall health. I am committed to providing compassionate care and staying updated with the latest advancements in neurology.",
                            SpecialtyId = 4
                        },
                        new
                        {
                            Id = 6,
                            HospitalId = 2,
                            IdentityId = "d99b0dbf-6a91-4dc0-a29e-9ffd46f79d35",
                            ImgUrl = "https://healthsyncstorage.blob.core.windows.net/profile-images/d99b0dbf-6a91-4dc0-a29e-9ffd46f79d35.jpg",
                            Information = "I am a cardiologist with a strong commitment to patient care and education. I graduated from Sofia Medical University and completed my residency in cardiology at the same institution. With over 10 years of experience, I specialize in diagnosing and treating various heart conditions, including hypertension, coronary artery disease, and heart failure. My approach to patient care emphasizes prevention and lifestyle modifications, and I work closely with my patients to develop personalized treatment plans. I am dedicated to staying current with the latest advancements in cardiology to provide the best possible care.",
                            SpecialtyId = 3
                        },
                        new
                        {
                            Id = 7,
                            HospitalId = 2,
                            IdentityId = "78850da7-a0ff-42f3-a862-d162457910a0",
                            SpecialtyId = 1
                        });
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.DoctorDayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Day")
                        .HasColumnType("integer");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorsDaysOff");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Day = 25,
                            DoctorId = 1,
                            Month = 12
                        });
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.DoctorMeeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("DoctorsMeetings");
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.DoctorReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Reviewer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorsReviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Dr. Ivanov went above and beyond in providing exceptional care. He took the time to listen to all my concerns, explained each step of the treatment, and made me feel at ease throughout the process. His professionalism, kindness, and dedication are truly appreciated. Highly recommended!",
                            DateAndTime = new DateTime(2024, 10, 14, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            Rating = 5,
                            Reviewer = "Aleks Petrov"
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Some of my questions felt unanswered clearer explanations would be appreciated.",
                            DateAndTime = new DateTime(2024, 9, 19, 10, 32, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            Rating = 2,
                            Reviewer = "Maria Kostova"
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Your attention and compassion made a huge difference!",
                            DateAndTime = new DateTime(2023, 1, 24, 19, 52, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            Rating = 4,
                            Reviewer = "Kristin Angelova"
                        },
                        new
                        {
                            Id = 4,
                            Comment = "I’d appreciate simpler language for medical terms next time.",
                            DateAndTime = new DateTime(2023, 1, 25, 13, 12, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            Rating = 3,
                            Reviewer = "Angel Bogdanski"
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Your dedication and support mean so much—thank you!",
                            DateAndTime = new DateTime(2024, 7, 20, 18, 52, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            Rating = 5,
                            Reviewer = "Kosta Adamovich"
                        },
                        new
                        {
                            Id = 6,
                            Comment = "Your empathy and expertise are truly appreciated!",
                            DateAndTime = new DateTime(2024, 8, 4, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            Rating = 5,
                            Reviewer = "Kristian Ivanov"
                        },
                        new
                        {
                            Id = 7,
                            Comment = "More guidance on the next steps for my treatment would be helpful.",
                            DateAndTime = new DateTime(2024, 6, 15, 22, 12, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            Rating = 2,
                            Reviewer = "Viktor Terziev"
                        },
                        new
                        {
                            Id = 8,
                            Comment = "Thank you for your exceptional care and expertise!",
                            DateAndTime = new DateTime(2024, 4, 2, 8, 2, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 2,
                            Rating = 5,
                            Reviewer = "Yordan Angelov"
                        },
                        new
                        {
                            Id = 9,
                            Comment = "I couldn't be more pleased with the level of care I received. Your attentiveness, kindness, and expertise made a world of difference.",
                            DateAndTime = new DateTime(2022, 12, 12, 10, 43, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 2,
                            Rating = 5,
                            Reviewer = "Kristian Ivanov"
                        },
                        new
                        {
                            Id = 10,
                            Comment = "Thank you for your exceptional care and expertise!",
                            DateAndTime = new DateTime(2020, 7, 12, 16, 42, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 3,
                            Rating = 5,
                            Reviewer = "Kristian Ivanov"
                        });
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.DoctorSpecialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DoctorSpecialties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Orthodontist"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Endocrinologist"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Cardiologist"
                        },
                        new
                        {
                            Id = 4,
                            Type = "Neurologist"
                        });
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.DoctorWeekDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsWorkDay")
                        .HasColumnType("boolean");

                    b.Property<int>("MeetingTimeMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("WeekDay")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("WorkDayEnd")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("WorkDayStart")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorsWeekDays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorId = 1,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 30,
                            WeekDay = 1,
                            WorkDayEnd = new TimeOnly(17, 30, 0),
                            WorkDayStart = new TimeOnly(9, 30, 0)
                        },
                        new
                        {
                            Id = 2,
                            DoctorId = 1,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 30,
                            WeekDay = 2,
                            WorkDayEnd = new TimeOnly(17, 30, 0),
                            WorkDayStart = new TimeOnly(12, 30, 0)
                        },
                        new
                        {
                            Id = 3,
                            DoctorId = 1,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 30,
                            WeekDay = 3,
                            WorkDayEnd = new TimeOnly(17, 30, 0),
                            WorkDayStart = new TimeOnly(9, 30, 0)
                        },
                        new
                        {
                            Id = 4,
                            DoctorId = 1,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 30,
                            WeekDay = 4,
                            WorkDayEnd = new TimeOnly(17, 30, 0),
                            WorkDayStart = new TimeOnly(12, 30, 0)
                        },
                        new
                        {
                            Id = 5,
                            DoctorId = 1,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 30,
                            WeekDay = 5,
                            WorkDayEnd = new TimeOnly(17, 30, 0),
                            WorkDayStart = new TimeOnly(9, 30, 0)
                        },
                        new
                        {
                            Id = 6,
                            DoctorId = 1,
                            IsWorkDay = false,
                            MeetingTimeMinutes = 0,
                            WeekDay = 6,
                            WorkDayEnd = new TimeOnly(0, 0, 0),
                            WorkDayStart = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            DoctorId = 1,
                            IsWorkDay = false,
                            MeetingTimeMinutes = 0,
                            WeekDay = 0,
                            WorkDayEnd = new TimeOnly(0, 0, 0),
                            WorkDayStart = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            DoctorId = 2,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 15,
                            WeekDay = 1,
                            WorkDayEnd = new TimeOnly(16, 0, 0),
                            WorkDayStart = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = 9,
                            DoctorId = 2,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 15,
                            WeekDay = 2,
                            WorkDayEnd = new TimeOnly(16, 0, 0),
                            WorkDayStart = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = 10,
                            DoctorId = 2,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 15,
                            WeekDay = 3,
                            WorkDayEnd = new TimeOnly(16, 0, 0),
                            WorkDayStart = new TimeOnly(11, 30, 0)
                        },
                        new
                        {
                            Id = 11,
                            DoctorId = 2,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 15,
                            WeekDay = 4,
                            WorkDayEnd = new TimeOnly(16, 0, 0),
                            WorkDayStart = new TimeOnly(11, 30, 0)
                        },
                        new
                        {
                            Id = 12,
                            DoctorId = 2,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 15,
                            WeekDay = 5,
                            WorkDayEnd = new TimeOnly(16, 0, 0),
                            WorkDayStart = new TimeOnly(11, 30, 0)
                        },
                        new
                        {
                            Id = 13,
                            DoctorId = 2,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 15,
                            WeekDay = 6,
                            WorkDayEnd = new TimeOnly(16, 0, 0),
                            WorkDayStart = new TimeOnly(11, 30, 0)
                        },
                        new
                        {
                            Id = 14,
                            DoctorId = 2,
                            IsWorkDay = false,
                            MeetingTimeMinutes = 0,
                            WeekDay = 0,
                            WorkDayEnd = new TimeOnly(0, 0, 0),
                            WorkDayStart = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            Id = 15,
                            DoctorId = 3,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 10,
                            WeekDay = 1,
                            WorkDayEnd = new TimeOnly(17, 0, 0),
                            WorkDayStart = new TimeOnly(9, 0, 0)
                        },
                        new
                        {
                            Id = 16,
                            DoctorId = 3,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 10,
                            WeekDay = 2,
                            WorkDayEnd = new TimeOnly(17, 0, 0),
                            WorkDayStart = new TimeOnly(9, 0, 0)
                        },
                        new
                        {
                            Id = 17,
                            DoctorId = 3,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 10,
                            WeekDay = 3,
                            WorkDayEnd = new TimeOnly(17, 0, 0),
                            WorkDayStart = new TimeOnly(9, 0, 0)
                        },
                        new
                        {
                            Id = 18,
                            DoctorId = 3,
                            IsWorkDay = false,
                            MeetingTimeMinutes = 0,
                            WeekDay = 4,
                            WorkDayEnd = new TimeOnly(0, 0, 0),
                            WorkDayStart = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            Id = 19,
                            DoctorId = 3,
                            IsWorkDay = false,
                            MeetingTimeMinutes = 0,
                            WeekDay = 5,
                            WorkDayEnd = new TimeOnly(0, 0, 0),
                            WorkDayStart = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            Id = 20,
                            DoctorId = 3,
                            IsWorkDay = false,
                            MeetingTimeMinutes = 0,
                            WeekDay = 6,
                            WorkDayEnd = new TimeOnly(0, 0, 0),
                            WorkDayStart = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            Id = 21,
                            DoctorId = 3,
                            IsWorkDay = false,
                            MeetingTimeMinutes = 0,
                            WeekDay = 0,
                            WorkDayEnd = new TimeOnly(0, 0, 0),
                            WorkDayStart = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            Id = 22,
                            DoctorId = 4,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 45,
                            WeekDay = 1,
                            WorkDayEnd = new TimeOnly(22, 0, 0),
                            WorkDayStart = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = 23,
                            DoctorId = 4,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 45,
                            WeekDay = 2,
                            WorkDayEnd = new TimeOnly(22, 0, 0),
                            WorkDayStart = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = 24,
                            DoctorId = 4,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 45,
                            WeekDay = 3,
                            WorkDayEnd = new TimeOnly(22, 0, 0),
                            WorkDayStart = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = 25,
                            DoctorId = 4,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 45,
                            WeekDay = 4,
                            WorkDayEnd = new TimeOnly(22, 0, 0),
                            WorkDayStart = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = 26,
                            DoctorId = 4,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 45,
                            WeekDay = 5,
                            WorkDayEnd = new TimeOnly(22, 0, 0),
                            WorkDayStart = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = 27,
                            DoctorId = 4,
                            IsWorkDay = false,
                            MeetingTimeMinutes = 0,
                            WeekDay = 6,
                            WorkDayEnd = new TimeOnly(0, 0, 0),
                            WorkDayStart = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            Id = 28,
                            DoctorId = 4,
                            IsWorkDay = false,
                            MeetingTimeMinutes = 0,
                            WeekDay = 0,
                            WorkDayEnd = new TimeOnly(0, 0, 0),
                            WorkDayStart = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            Id = 29,
                            DoctorId = 5,
                            IsWorkDay = false,
                            MeetingTimeMinutes = 0,
                            WeekDay = 1,
                            WorkDayEnd = new TimeOnly(0, 0, 0),
                            WorkDayStart = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            Id = 30,
                            DoctorId = 5,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 15,
                            WeekDay = 2,
                            WorkDayEnd = new TimeOnly(6, 0, 0),
                            WorkDayStart = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = 31,
                            DoctorId = 5,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 15,
                            WeekDay = 3,
                            WorkDayEnd = new TimeOnly(6, 0, 0),
                            WorkDayStart = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = 32,
                            DoctorId = 5,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 15,
                            WeekDay = 4,
                            WorkDayEnd = new TimeOnly(17, 0, 0),
                            WorkDayStart = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = 33,
                            DoctorId = 5,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 15,
                            WeekDay = 5,
                            WorkDayEnd = new TimeOnly(17, 0, 0),
                            WorkDayStart = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = 34,
                            DoctorId = 5,
                            IsWorkDay = false,
                            MeetingTimeMinutes = 0,
                            WeekDay = 6,
                            WorkDayEnd = new TimeOnly(0, 0, 0),
                            WorkDayStart = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            Id = 35,
                            DoctorId = 5,
                            IsWorkDay = false,
                            MeetingTimeMinutes = 0,
                            WeekDay = 0,
                            WorkDayEnd = new TimeOnly(0, 0, 0),
                            WorkDayStart = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            Id = 36,
                            DoctorId = 6,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 60,
                            WeekDay = 1,
                            WorkDayEnd = new TimeOnly(20, 30, 0),
                            WorkDayStart = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = 37,
                            DoctorId = 6,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 60,
                            WeekDay = 2,
                            WorkDayEnd = new TimeOnly(20, 30, 0),
                            WorkDayStart = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = 38,
                            DoctorId = 6,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 60,
                            WeekDay = 3,
                            WorkDayEnd = new TimeOnly(20, 30, 0),
                            WorkDayStart = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = 39,
                            DoctorId = 6,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 60,
                            WeekDay = 4,
                            WorkDayEnd = new TimeOnly(20, 30, 0),
                            WorkDayStart = new TimeOnly(12, 0, 0)
                        },
                        new
                        {
                            Id = 40,
                            DoctorId = 6,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 60,
                            WeekDay = 5,
                            WorkDayEnd = new TimeOnly(20, 30, 0),
                            WorkDayStart = new TimeOnly(12, 0, 0)
                        },
                        new
                        {
                            Id = 41,
                            DoctorId = 6,
                            IsWorkDay = false,
                            MeetingTimeMinutes = 0,
                            WeekDay = 6,
                            WorkDayEnd = new TimeOnly(0, 0, 0),
                            WorkDayStart = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            Id = 42,
                            DoctorId = 6,
                            IsWorkDay = false,
                            MeetingTimeMinutes = 0,
                            WeekDay = 0,
                            WorkDayEnd = new TimeOnly(0, 0, 0),
                            WorkDayStart = new TimeOnly(0, 0, 0)
                        });
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Hospitals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "456 Sunrise Avenue, Clearwater, FL 33759, USA",
                            Name = "Sunnybrook General Hospital"
                        },
                        new
                        {
                            Id = 2,
                            Address = "321 Maple Street, Boulder, CO 80301, USA",
                            Name = "Pine Hills Medical Center"
                        });
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.MessageImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MessageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageImages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "87ac5db3-1586-4580-8037-ed108b66a9b1",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "bd4718fa-f25a-40ab-abce-8261cc3ea8e8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a3717562-385e-41ce-9eff-0f1b994e5548",
                            RoleId = "87ac5db3-1586-4580-8037-ed108b66a9b1"
                        },
                        new
                        {
                            UserId = "4d650e24-6b66-41e3-8391-efab8c31a1dd",
                            RoleId = "87ac5db3-1586-4580-8037-ed108b66a9b1"
                        },
                        new
                        {
                            UserId = "88cd5a7b-01d8-49b4-8688-35cd23751532",
                            RoleId = "87ac5db3-1586-4580-8037-ed108b66a9b1"
                        },
                        new
                        {
                            UserId = "95189f02-fb1a-4700-95e3-6146b8aa8b15",
                            RoleId = "87ac5db3-1586-4580-8037-ed108b66a9b1"
                        },
                        new
                        {
                            UserId = "f37b43ca-86a2-4b11-972d-5e0569f4deb3",
                            RoleId = "87ac5db3-1586-4580-8037-ed108b66a9b1"
                        },
                        new
                        {
                            UserId = "d99b0dbf-6a91-4dc0-a29e-9ffd46f79d35",
                            RoleId = "87ac5db3-1586-4580-8037-ed108b66a9b1"
                        },
                        new
                        {
                            UserId = "78850da7-a0ff-42f3-a862-d162457910a0",
                            RoleId = "87ac5db3-1586-4580-8037-ed108b66a9b1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.ChatMessage", b =>
                {
                    b.HasOne("Infrastructure.Database.Entities.ApplicationUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Infrastructure.Database.Entities.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.Doctor", b =>
                {
                    b.HasOne("Infrastructure.Database.Entities.Hospital", "Hospital")
                        .WithMany("Doctors")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Database.Entities.ApplicationUser", "Identity")
                        .WithMany()
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Database.Entities.DoctorSpecialty", "Specialty")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");

                    b.Navigation("Identity");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.DoctorDayOff", b =>
                {
                    b.HasOne("Infrastructure.Database.Entities.Doctor", "Doctor")
                        .WithMany("DaysOff")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.DoctorMeeting", b =>
                {
                    b.HasOne("Infrastructure.Database.Entities.Doctor", "Doctor")
                        .WithMany("Meetings")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Database.Entities.ApplicationUser", "Patient")
                        .WithMany("Meetings")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.DoctorReview", b =>
                {
                    b.HasOne("Infrastructure.Database.Entities.Doctor", "Doctor")
                        .WithMany("Reviews")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.DoctorWeekDay", b =>
                {
                    b.HasOne("Infrastructure.Database.Entities.Doctor", "Doctor")
                        .WithMany("WorkWeek")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.MessageImage", b =>
                {
                    b.HasOne("Infrastructure.Database.Entities.ChatMessage", "Message")
                        .WithMany("Images")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Infrastructure.Database.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Infrastructure.Database.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Database.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Infrastructure.Database.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Meetings");
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.ChatMessage", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.Doctor", b =>
                {
                    b.Navigation("DaysOff");

                    b.Navigation("Meetings");

                    b.Navigation("Reviews");

                    b.Navigation("WorkWeek");
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.DoctorSpecialty", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.Hospital", b =>
                {
                    b.Navigation("Doctors");
                });
#pragma warning restore 612, 618
        }
    }
}
