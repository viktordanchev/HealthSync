// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(HealthSyncDbContext))]
    partial class HealthSyncDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Database.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a3717562-385e-41ce-9eff-0f1b994e5548",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2b4f5d0e-d014-4168-9f62-32266e6049e3",
                            Email = "i.ivanov@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Ivan",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "I.IVANOV@MAIL.COM",
                            NormalizedUserName = "I.IVANOV@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE7QfdUtuWeImXO7IQBdXpvKgppSozQinjSHdjo8rqD7vg2Oa6hrKofrz5HNrOFWlw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "053e126f-f0b7-4008-8125-d3b0bae6ceec",
                            TwoFactorEnabled = false,
                            UserName = "i.ivanov@mail.com"
                        },
                        new
                        {
                            Id = "4d650e24-6b66-41e3-8391-efab8c31a1dd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d7817e6-41b0-4f0a-8d8f-c16f18d71259",
                            Email = "m.marinova@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Maria",
                            LastName = "Marinova",
                            LockoutEnabled = false,
                            NormalizedEmail = "M.MARINOVA@MAIL.COM",
                            NormalizedUserName = "M.MARINOVA@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH8GfayyDLkmKolcPZzvKGtmu6g7QFCtHSQ7t7Ky+HPutAJsS62mHAju68oWmnG7Gg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0913b77-3a97-4471-bddb-dbc709c4453f",
                            TwoFactorEnabled = false,
                            UserName = "m.marinova@mail.com"
                        },
                        new
                        {
                            Id = "88cd5a7b-01d8-49b4-8688-35cd23751532",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b5ddb8e5-09e2-43cf-a7f9-d9e9a8efadf7",
                            Email = "a.kirilov@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Aleks",
                            LastName = "Kirilov",
                            LockoutEnabled = false,
                            NormalizedEmail = "A.KIRILOV@MAIL.COM",
                            NormalizedUserName = "A.KIRILOV@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL/y742nb5tKO7rAktveiTXxmWys8UAn7b1sXzwGMTfEYKEVS463Znop5B0+J471QQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9c8b210c-5024-4ee9-bbe0-c72e973ec55b",
                            TwoFactorEnabled = false,
                            UserName = "a.kirilov@mail.com"
                        },
                        new
                        {
                            Id = "95189f02-fb1a-4700-95e3-6146b8aa8b15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bf1f4e16-3a50-4bd1-91b3-d9dad8d71f9e",
                            Email = "k.conev@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Kiril",
                            LastName = "Conev",
                            LockoutEnabled = false,
                            NormalizedEmail = "K.CONEV@MAIL.COM",
                            NormalizedUserName = "K.CONEV@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFFfBNcCCGSQf2UhHNospHjybx3v1GwwsB8XJHEuK4DAyTWqrhLybYKNMSJH3B2hsg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bbcc5e0f-7d5a-47f6-8663-021b407a0f62",
                            TwoFactorEnabled = false,
                            UserName = "k.conev@mail.com"
                        },
                        new
                        {
                            Id = "f37b43ca-86a2-4b11-972d-5e0569f4deb3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2d3829b-3a37-49e2-a98e-8ee39d8b08be",
                            Email = "i.ivanova@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Ivana",
                            LastName = "Ivanova",
                            LockoutEnabled = false,
                            NormalizedEmail = "I.IVANOVA@MAIL.COM",
                            NormalizedUserName = "I.IVANOVA@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ6ovUx2+2xIpynC05jWWfMJm616GXnmw6B5ZoIFOFSO2ABHWJTjq5LvhEe6AwQdjg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f0a08bf4-34c8-4763-94a7-a7e188b5b2a9",
                            TwoFactorEnabled = false,
                            UserName = "i.ivanova@mail.com"
                        },
                        new
                        {
                            Id = "d99b0dbf-6a91-4dc0-a29e-9ffd46f79d35",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4e9be69-a214-4dcb-ae2d-cb937be0bbaf",
                            Email = "m.kirilova@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Monika",
                            LastName = "Kirilova",
                            LockoutEnabled = false,
                            NormalizedEmail = "M.KIRILOVA@MAIL.COM",
                            NormalizedUserName = "M.KIRILOVA@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGsNwKl2sqw8/EBLxO/18qeSshROxVJELNEvODv9AhZkTNbtFsYpxArP1IDPxlPjVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0d859979-eae0-4f26-a83d-239f452811d9",
                            TwoFactorEnabled = false,
                            UserName = "m.kirilova@mail.com"
                        },
                        new
                        {
                            Id = "78850da7-a0ff-42f3-a862-d162457910a0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5946bab8-b28c-4a7a-81af-c5b79648165b",
                            Email = "v.yankova@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Vanya",
                            LastName = "Yankova",
                            LockoutEnabled = false,
                            NormalizedEmail = "V.YANKOVA@MAIL.COM",
                            NormalizedUserName = "V.YANKOVA@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHn12x0XfTVVu++ymEp3Svc9uV8cIzS/LuPAYQ+yih/28RdKFnnLyjTqOq+7+T4TWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b83e808d-78c8-432c-8f5a-dbb127fa525b",
                            TwoFactorEnabled = false,
                            UserName = "v.yankova@mail.com"
                        });
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Information")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("IdentityId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HospitalId = 1,
                            IdentityId = "a3717562-385e-41ce-9eff-0f1b994e5548",
                            ImgUrl = "https://storage.cloud.google.com/healthsync/profile-images/Ivan-Ivanov.jpg",
                            Information = "I am Dr. Ivan Ivanov, an orthodontist with over 10 years of experience. I earned my Doctor of Dental Medicine (DMD) degree from Sofia Medical University, where I also completed my orthodontic specialization. I have worked in various reputable dental clinics, providing treatments such as braces, clear aligners, and other advanced orthodontic procedures for patients of all ages. I focus on delivering personalized care, creating treatment plans tailored to each patient’s specific needs. I hold certifications in advanced orthodontic techniques and regularly attend courses to stay updated with the latest advancements in the field. My goal is to ensure that every patient receives the best possible outcome. Known for my compassionate approach and attention to detail, I strive to help my patients achieve healthier, more beautiful smiles. My dedication to patient satisfaction and passion for orthodontics have earned me a solid reputation in the field, making me a trusted choice for care.",
                            SpecialtyId = 1
                        },
                        new
                        {
                            Id = 2,
                            HospitalId = 1,
                            IdentityId = "4d650e24-6b66-41e3-8391-efab8c31a1dd",
                            ImgUrl = "https://storage.cloud.google.com/healthsync/profile-images/Maria-Marinova.jpg",
                            SpecialtyId = 2
                        },
                        new
                        {
                            Id = 3,
                            HospitalId = 1,
                            IdentityId = "88cd5a7b-01d8-49b4-8688-35cd23751532",
                            ImgUrl = "https://storage.cloud.google.com/healthsync/profile-images/Aleks-Kirilov.jpg",
                            SpecialtyId = 2
                        },
                        new
                        {
                            Id = 4,
                            HospitalId = 1,
                            IdentityId = "95189f02-fb1a-4700-95e3-6146b8aa8b15",
                            ImgUrl = "https://storage.cloud.google.com/healthsync/profile-images/Kiril-Conev.jpg",
                            SpecialtyId = 3
                        },
                        new
                        {
                            Id = 5,
                            HospitalId = 2,
                            IdentityId = "f37b43ca-86a2-4b11-972d-5e0569f4deb3",
                            ImgUrl = "https://storage.cloud.google.com/healthsync/profile-images/Ivana-Ivanova.jpg",
                            SpecialtyId = 4
                        },
                        new
                        {
                            Id = 6,
                            HospitalId = 2,
                            IdentityId = "d99b0dbf-6a91-4dc0-a29e-9ffd46f79d35",
                            ImgUrl = "https://storage.cloud.google.com/healthsync/profile-images/Monika-Kirilova.jpg",
                            SpecialtyId = 3
                        },
                        new
                        {
                            Id = 7,
                            HospitalId = 2,
                            IdentityId = "78850da7-a0ff-42f3-a862-d162457910a0",
                            SpecialtyId = 1
                        });
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.DoctorDayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("MeetingTimeMinutes")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("WorkDayEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("WorkDayStart")
                        .HasColumnType("time");

                    b.Property<bool>("isWorkDay")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorsDaysOff");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Day = 25,
                            DoctorId = 1,
                            MeetingTimeMinutes = 0,
                            Month = 12,
                            WorkDayEnd = new TimeOnly(0, 0, 0),
                            WorkDayStart = new TimeOnly(0, 0, 0),
                            isWorkDay = false
                        });
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.DoctorMeeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("DoctorsMeetings");
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.DoctorReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Reviewer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorsReviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Dr. Ivanov went above and beyond in providing exceptional care. He took the time to listen to all my concerns, explained each step of the treatment, and made me feel at ease throughout the process. His professionalism, kindness, and dedication are truly appreciated. Highly recommended!",
                            DateAndTime = new DateTime(2024, 10, 14, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            Rating = 5,
                            Reviewer = "Aleks Petrov"
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Some of my questions felt unanswered clearer explanations would be appreciated.",
                            DateAndTime = new DateTime(2024, 9, 19, 10, 32, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            Rating = 2,
                            Reviewer = "Maria Kostova"
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Your attention and compassion made a huge difference!",
                            DateAndTime = new DateTime(2023, 1, 24, 19, 52, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            Rating = 4,
                            Reviewer = "Kristin Angelova"
                        },
                        new
                        {
                            Id = 4,
                            Comment = "I’d appreciate simpler language for medical terms next time.",
                            DateAndTime = new DateTime(2023, 1, 25, 13, 12, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            Rating = 3,
                            Reviewer = "Angel Bogdanski"
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Your dedication and support mean so much—thank you!",
                            DateAndTime = new DateTime(2024, 7, 20, 18, 52, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            Rating = 5,
                            Reviewer = "Kosta Adamovich"
                        },
                        new
                        {
                            Id = 6,
                            Comment = "Your empathy and expertise are truly appreciated!",
                            DateAndTime = new DateTime(2024, 8, 4, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            Rating = 5,
                            Reviewer = "Kristian Ivanov"
                        },
                        new
                        {
                            Id = 7,
                            Comment = "More guidance on the next steps for my treatment would be helpful.",
                            DateAndTime = new DateTime(2024, 6, 15, 22, 12, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            Rating = 2,
                            Reviewer = "Viktor Terziev"
                        },
                        new
                        {
                            Id = 8,
                            Comment = "Thank you for your exceptional care and expertise!",
                            DateAndTime = new DateTime(2024, 4, 2, 8, 2, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 2,
                            Rating = 5,
                            Reviewer = "Yordan Angelov"
                        },
                        new
                        {
                            Id = 9,
                            Comment = "I couldn't be more pleased with the level of care I received. Your attentiveness, kindness, and expertise made a world of difference.",
                            DateAndTime = new DateTime(2022, 12, 12, 10, 43, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 2,
                            Rating = 5,
                            Reviewer = "Kristian Ivanov"
                        });
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.DoctorSpecialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DoctorSpecialties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Orthodontist"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Endocrinologist"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Cardiologist"
                        },
                        new
                        {
                            Id = 4,
                            Type = "Neurologist"
                        });
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.DoctorWeekDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsWorkDay")
                        .HasColumnType("bit");

                    b.Property<int>("MeetingTimeMinutes")
                        .HasColumnType("int");

                    b.Property<int>("WeekDay")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("WorkDayEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("WorkDayStart")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorsWeekDays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorId = 1,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 30,
                            WeekDay = 1,
                            WorkDayEnd = new TimeOnly(17, 30, 0),
                            WorkDayStart = new TimeOnly(9, 30, 0)
                        },
                        new
                        {
                            Id = 2,
                            DoctorId = 1,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 30,
                            WeekDay = 2,
                            WorkDayEnd = new TimeOnly(17, 30, 0),
                            WorkDayStart = new TimeOnly(12, 30, 0)
                        },
                        new
                        {
                            Id = 3,
                            DoctorId = 1,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 30,
                            WeekDay = 3,
                            WorkDayEnd = new TimeOnly(17, 30, 0),
                            WorkDayStart = new TimeOnly(9, 30, 0)
                        },
                        new
                        {
                            Id = 4,
                            DoctorId = 1,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 30,
                            WeekDay = 4,
                            WorkDayEnd = new TimeOnly(17, 30, 0),
                            WorkDayStart = new TimeOnly(12, 30, 0)
                        },
                        new
                        {
                            Id = 5,
                            DoctorId = 1,
                            IsWorkDay = true,
                            MeetingTimeMinutes = 30,
                            WeekDay = 5,
                            WorkDayEnd = new TimeOnly(17, 30, 0),
                            WorkDayStart = new TimeOnly(9, 30, 0)
                        },
                        new
                        {
                            Id = 6,
                            DoctorId = 1,
                            IsWorkDay = false,
                            MeetingTimeMinutes = 0,
                            WeekDay = 6,
                            WorkDayEnd = new TimeOnly(0, 0, 0),
                            WorkDayStart = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            DoctorId = 1,
                            IsWorkDay = false,
                            MeetingTimeMinutes = 0,
                            WeekDay = 0,
                            WorkDayEnd = new TimeOnly(0, 0, 0),
                            WorkDayStart = new TimeOnly(0, 0, 0)
                        });
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Hospitals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "456 Sunrise Avenue, Clearwater, FL 33759, USA",
                            Name = "Sunnybrook General Hospital"
                        },
                        new
                        {
                            Id = 2,
                            Address = "321 Maple Street, Boulder, CO 80301, USA",
                            Name = "Pine Hills Medical Center"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a550b411-e5c7-407f-aaba-35161bab127e",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "bd4718fa-f25a-40ab-abce-8261cc3ea8e8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a3717562-385e-41ce-9eff-0f1b994e5548",
                            RoleId = "a550b411-e5c7-407f-aaba-35161bab127e"
                        },
                        new
                        {
                            UserId = "4d650e24-6b66-41e3-8391-efab8c31a1dd",
                            RoleId = "a550b411-e5c7-407f-aaba-35161bab127e"
                        },
                        new
                        {
                            UserId = "88cd5a7b-01d8-49b4-8688-35cd23751532",
                            RoleId = "a550b411-e5c7-407f-aaba-35161bab127e"
                        },
                        new
                        {
                            UserId = "95189f02-fb1a-4700-95e3-6146b8aa8b15",
                            RoleId = "a550b411-e5c7-407f-aaba-35161bab127e"
                        },
                        new
                        {
                            UserId = "f37b43ca-86a2-4b11-972d-5e0569f4deb3",
                            RoleId = "a550b411-e5c7-407f-aaba-35161bab127e"
                        },
                        new
                        {
                            UserId = "d99b0dbf-6a91-4dc0-a29e-9ffd46f79d35",
                            RoleId = "a550b411-e5c7-407f-aaba-35161bab127e"
                        },
                        new
                        {
                            UserId = "78850da7-a0ff-42f3-a862-d162457910a0",
                            RoleId = "a550b411-e5c7-407f-aaba-35161bab127e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.Doctor", b =>
                {
                    b.HasOne("Infrastructure.Database.Entities.Hospital", "Hospital")
                        .WithMany("Doctors")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Database.Entities.ApplicationUser", "Identity")
                        .WithMany()
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Database.Entities.DoctorSpecialty", "Specialty")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");

                    b.Navigation("Identity");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.DoctorDayOff", b =>
                {
                    b.HasOne("Infrastructure.Database.Entities.Doctor", "Doctor")
                        .WithMany("DaysOff")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.DoctorMeeting", b =>
                {
                    b.HasOne("Infrastructure.Database.Entities.Doctor", "Doctor")
                        .WithMany("Meetings")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Database.Entities.ApplicationUser", "Patient")
                        .WithMany("Meetings")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.DoctorReview", b =>
                {
                    b.HasOne("Infrastructure.Database.Entities.Doctor", "Doctor")
                        .WithMany("Reviews")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.DoctorWeekDay", b =>
                {
                    b.HasOne("Infrastructure.Database.Entities.Doctor", "Doctor")
                        .WithMany("WorkWeek")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Infrastructure.Database.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Infrastructure.Database.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Database.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Infrastructure.Database.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Meetings");
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.Doctor", b =>
                {
                    b.Navigation("DaysOff");

                    b.Navigation("Meetings");

                    b.Navigation("Reviews");

                    b.Navigation("WorkWeek");
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.DoctorSpecialty", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Infrastructure.Database.Entities.Hospital", b =>
                {
                    b.Navigation("Doctors");
                });
#pragma warning restore 612, 618
        }
    }
}
